{
	"info": {
		"_postman_id": "a9193de4-78c0-44f1-82fc-012cef547b5f",
		"name": "Integration testing user",
		"description": "Make sure enviroment variables \"user\" & \"password\" are set.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27678778",
		"_collection_link": "https://www.postman.com/ruckel/workspace/ruckel-public-workspace/collection/27678778-a9193de4-78c0-44f1-82fc-012cef547b5f?action=share&creator=27678778&source=collection_link"
	},
	"item": [
		{
			"name": "customer all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get all customers\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{baseUrlCustomer}}/all",
					"host": [
						"{{baseUrlCustomer}}"
					],
					"path": [
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "customer id 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get individual customer\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlCustomer}}/1",
					"host": [
						"{{baseUrlCustomer}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "order all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get all orders\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{baseUrlOrder}}/all",
					"host": [
						"{{baseUrlOrder}}"
					],
					"path": [
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "order/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get individual order.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlOrder}}/1",
					"host": [
						"{{baseUrlOrder}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "order/99",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get nonexisting order.\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.expect(response.message).to.eql(\"Could not find order with ID: 99\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlOrder}}/99",
					"host": [
						"{{baseUrlOrder}}"
					],
					"path": [
						"99"
					]
				}
			},
			"response": []
		},
		{
			"name": "order all/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get orders from customer ID 1\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlOrder}}/all/1",
					"host": [
						"{{baseUrlOrder}}"
					],
					"path": [
						"all",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "order all/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get empty array of orders from customer ID 2\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlOrder}}/all/2",
					"host": [
						"{{baseUrlOrder}}"
					],
					"path": [
						"all",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "order all/99",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get order from nonexisting customer ID 3\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.expect(response.message).to.eql(\"Could not find order with ID: 99\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlOrder}}/all/99",
					"host": [
						"{{baseUrlOrder}}"
					],
					"path": [
						"all",
						"99"
					]
				}
			},
			"response": []
		},
		{
			"name": "product all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get all products\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{baseUrlProduct}}/all",
					"host": [
						"{{baseUrlProduct}}"
					],
					"path": [
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "product id 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.test(\"Get product ID 1\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(response.id).to.eql(1);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrlProduct}}/1",
					"host": [
						"{{baseUrlProduct}}"
					],
					"path": [
						"1"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "{{username-user}}",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrlCustomer",
			"value": "localhost:8082/customer",
			"type": "string"
		},
		{
			"key": "baseUrlOrder",
			"value": "localhost:8081/order",
			"type": "string"
		},
		{
			"key": "baseUrlProduct",
			"value": "localhost:8080/product",
			"type": "string"
		}
	]
}